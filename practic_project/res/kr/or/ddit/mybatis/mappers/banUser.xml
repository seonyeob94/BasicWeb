<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="banUser">

		

	<resultMap id="loanMap" type="BookLoansVo">
	    <result property="loanNo" column="loan_no"/>
	    <result property="loanDate" column="loan_date"/>
	    <result property="dueDate" column="due_date"/>
	    <result property="returnDate" column="return_date"/>
	    <result property="userNo" column="USER_NO"/>
	    <result property="realBook" column="real_book"/>
	    <result property="policyNo" column="POLICY_NO"/>
	</resultMap>
	
	<select id="banUserList"></select>

	<insert id="banUserInsert">
		
	</insert>
	
	<!-- 6) 연체자 → ban_users 에 신규 등록 -->
    <insert id="banUsersOverdue">
    	INSERT INTO BAN_USERS
		  ( BAN_NO
		  , BAN_DATE
		  , BAN_DAYS
		  , RELEASE_DATE
		  , POLICY_NO
		  , LOAN_NO
		  , USER_NO
		  , BAN_NOTE
		  )
		SELECT 
		    SEQ_BAN_USERS.NEXTVAL             AS BAN_NO
		  , TRUNC(B.DUE_DATE) + P.DAYS + 1    AS BAN_DATE     -- 연체 시작일
		  , NULL                              AS BAN_DAYS     -- 총 연체 일수 아직 미정
		  , NULL                              AS RELEASE_DATE -- 아직 해제일 미정
		  , P.POLICY_NO                       AS POLICY_NO
		  , B.LOAN_NO                         AS LOAN_NO
		  , B.USER_NO                         AS USER_NO
		  , '연체'                             AS BAN_NOTE
		FROM BOOK_LOANS      B
		JOIN OVERDUE_POLICY  P ON P.POLICY_NO = B.POLICY_NO
		JOIN USERS           U ON U.USER_NO   = B.USER_NO
		WHERE U.STATUS            = '정지'
		  AND P.IS_ACTIVE         = 'Y'
		  AND B.RETURN_DATE    IS  NULL              -- 아직 미반납된 더미 데이터만
		  AND TRUNC(SYSDATE) &gt; TRUNC(B.DUE_DATE) + P.DAYS  -- 실제 연체 발생 건만
		  AND NOT EXISTS (
		       SELECT 1
		         FROM BAN_USERS BU
		        WHERE BU.USER_NO = B.USER_NO
		        AND BU.LOAN_NO = B.LOAN_NO
		      )
    </insert>
	
	<!-- 11) 연체자 반납 시 ban_users.release_date 설정 -->
    <update id="banReleaseDateOnReturn" parameterType="BookLoansVo">
    	MERGE INTO BAN_USERS B
		USING (
		  SELECT 
		    L.LOAN_NO,
		    TRUNC(L.RETURN_DATE) - TRUNC(L.LOAN_DATE) AS PENALTY_DAYS
		  FROM BOOK_LOANS L
		  JOIN OVERDUE_POLICY P ON L.POLICY_NO = P.POLICY_NO
		  WHERE TRUNC(L.RETURN_DATE) > TRUNC(L.DUE_DATE) + P.DAYS
		    AND L.LOAN_NO = #{loanNo}
		) SRC
		ON (B.LOAN_NO = SRC.LOAN_NO)
		WHEN MATCHED THEN
		  UPDATE SET
		    BAN_DAYS     = SRC.PENALTY_DAYS,
		    RELEASE_DATE = TRUNC(SYSDATE) + SRC.PENALTY_DAYS
		    WHERE B.RELEASE_DATE IS NULL
    </update>
    
    <!-- 7) 60일 초과 지연자는 ban_users 에서 분실로 업데이트 -->
    <update id="lostBookBan">
    	UPDATE BAN_USERS BU
	   SET 
	       BU.BAN_DAYS = 60,
	       BU.RELEASE_DATE = TRUNC(SYSDATE) + 60,
	       BU.BAN_NOTE     = '분실'
	 WHERE EXISTS (
	     SELECT 1
	       FROM BOOK_LOANS B
	      WHERE B.LOAN_NO      = BU.LOAN_NO
	        AND B.RETURN_DATE IS NULL
	        AND TRUNC(SYSDATE) &gt; TRUNC(B.DUE_DATE) + 60
	 )
    </update>
	
	
	
	
</mapper>
